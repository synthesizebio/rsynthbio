[{"path":"https://synthesizebio.github.io/rsynthbio/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 rsynthbio authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"https://synthesizebio.github.io/rsynthbio/PULL_REQUEST_TEMPLATE.html","id":"checklist","dir":"","previous_headings":"","what":"Checklist:","title":"Summary","text":"performed self-review code commented code, particularly hard--understand areas made corresponding changes documentation changes generate new warnings added tests prove fix effective feature works New existing unit tests pass locally changes dependent changes merged published downstream modules","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/articles/getting-started.html","id":"how-to-install","dir":"Articles","previous_headings":"","what":"How to install","title":"Getting Started","text":"can install rsynthbio CRAN: want development version, can install using remotes package install GitHub: installed, load package:","code":"install.packages(\"rsynthbio\") if (!(\"remotes\" %in% installed.packages())) {   install.packages(\"remotes\") } remotes::install_github(\"synthesizebio/rsynthbio\") library(rsynthbio)"},{"path":"https://synthesizebio.github.io/rsynthbio/articles/getting-started.html","id":"authentication","dir":"Articles","previous_headings":"","what":"Authentication","title":"Getting Started","text":"using Synthesize Bio API, need set API token. package provides secure way handle authentication: Loading API key session. can obtain API token registering Synthesize Bio.","code":"# Securely prompt for and store your API token # The token will not be visible in the console set_synthesize_token()  # You can also store the token in your system keyring for persistence # across R sessions (requires the 'keyring' package) set_synthesize_token(use_keyring = TRUE) # In future sessions, load the stored token load_synthesize_token_from_keyring()  # Check if a token is already set has_synthesize_token()"},{"path":"https://synthesizebio.github.io/rsynthbio/articles/getting-started.html","id":"security-best-practices","dir":"Articles","previous_headings":"Authentication","what":"Security Best Practices","title":"Getting Started","text":"security reasons, remember clear token ’re done: Never hard-code token scripts shared committed version control.","code":"# Clear token from current session clear_synthesize_token()  # Clear token from both session and keyring clear_synthesize_token(remove_from_keyring = TRUE)"},{"path":[]},{"path":"https://synthesizebio.github.io/rsynthbio/articles/getting-started.html","id":"available-modalities","dir":"Articles","previous_headings":"Basic Usage","what":"Available Modalities","title":"Getting Started","text":"package supports multiple data modalities: Currently supported modalities: bulk: Bulk RNA-seq data single-cell: Single-cell RNA-seq data","code":"# Check available modalities get_valid_modalities()"},{"path":"https://synthesizebio.github.io/rsynthbio/articles/getting-started.html","id":"creating-a-query","dir":"Articles","previous_headings":"Basic Usage","what":"Creating a Query","title":"Getting Started","text":"first step generating AI-generated gene expression data create query. package provides sample queries modality: query consists : modality: type gene expression data generate (“bulk” “single-cell”) mode: prediction mode (e.g., “mean estimation” “sample generation”) inputs: list biological conditions generate data train models diverse multi-omics datasets. two model modes available today: Mean estimation: models create distribution capturing biological heterogeneity consistent supplied metadata. distribution sampled predict gene expression distribution captures measurement error. mean distribution serves prediction Sample generation: model works identically mean estimation approach except final gene expression distribution also sampled generate realistic looking synthetic data captures error associated measurement","code":"# Get a sample query for bulk RNA-seq query <- get_valid_query(modality = \"bulk\")  # Get a sample query for single-cell RNA-seq query_sc <- get_valid_query(modality = \"single-cell\")  # Inspect the query structure str(query)"},{"path":"https://synthesizebio.github.io/rsynthbio/articles/getting-started.html","id":"making-a-prediction","dir":"Articles","previous_headings":"Basic Usage","what":"Making a Prediction","title":"Getting Started","text":"query ready, can send API generate gene expression data: result list two dataframes: metadata expression","code":"result <- predict_query(query, as_counts = TRUE)"},{"path":"https://synthesizebio.github.io/rsynthbio/articles/getting-started.html","id":"understanding-the-async-api","dir":"Articles","previous_headings":"Basic Usage","what":"Understanding the Async API","title":"Getting Started","text":"Behind scenes, API uses asynchronous model handle queries efficiently: query submitted API, returns query ID function automatically polls status endpoint (default: every 2 seconds) query completes, results downloaded signed URL Data parsed returned R data frames happens automatically call predict_query().","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/articles/getting-started.html","id":"controlling-async-behavior","dir":"Articles","previous_headings":"Basic Usage","what":"Controlling Async Behavior","title":"Getting Started","text":"can customize polling behavior needed:","code":"# Increase timeout for large queries (default: 900 seconds = 15 minutes) result <- predict_query(   query,   poll_timeout_seconds = 1800, # 30 minutes   poll_interval_seconds = 5 # Check every 5 seconds instead of 2 )"},{"path":"https://synthesizebio.github.io/rsynthbio/articles/getting-started.html","id":"modifying-a-query","dir":"Articles","previous_headings":"Basic Usage","what":"Modifying a Query","title":"Getting Started","text":"can customize query fit specific research needs: input metadata list lists. available metadata fields: Biological: age_years cell_line_ontology_id cell_type_ontology_id developmental_stage disease_ontology_id ethnicity genotype race sample_type (“cell line”, “organoid”, “”, “primary cells”, “primary tissue”, “xenograft”) sex (“male”, “female”) tissue_ontology_id Perturbational: perturbation_dose perturbation_ontology_id perturbation_time perturbation_type (“coculture”,“compound”,“control”,“crispr”,“genetic”,“infection”,“”,“overexpression”,“peptide biologic”,“shrna”,“sirna”) Technical: study (Bioproject ID) library_selection (e.g., “cDNA”, “polyA”, “Oligo-dT” - see https://ena-docs.readthedocs.io/en/latest/submit/reads/webin-cli.html#permitted-values--library-selection) library_layout (“PAIRED”, “SINGLE”) platform (“illumina”)","code":"# Adjust number of samples query$inputs[[1]]$num_samples <- 10  # Add a new condition query$inputs[[3]] <- list(   metadata = list(     sex = \"male\",     sample_type = \"primary tissue\"   ),   num_samples = 3 )"},{"path":"https://synthesizebio.github.io/rsynthbio/articles/getting-started.html","id":"acceptable-metadata-values","dir":"Articles","previous_headings":"Basic Usage","what":"Acceptable Metadata Values","title":"Getting Started","text":"following valid values expected formats selected metadata keys: lookup ontology terms, recommend using EMBL-EBI Ontology Lookup Service. Models limited acceptable range metadata input values. provide value acceptable range, API return error.","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/articles/getting-started.html","id":"additional-prediction-options","dir":"Articles","previous_headings":"Basic Usage","what":"Additional Prediction Options","title":"Getting Started","text":"can also request log-transformed CPM instead raw counts:","code":"# Request log-transformed CPM instead of raw counts result_log <- predict_query(query, as_counts = FALSE)"},{"path":"https://synthesizebio.github.io/rsynthbio/articles/getting-started.html","id":"working-with-results","dir":"Articles","previous_headings":"Basic Usage","what":"Working with Results","title":"Getting Started","text":"may want process data chunks save later use:","code":"# Access metadata and expression matrices metadata <- result$metadata expression <- result$expression  # Check dimensions dim(expression)  # View metadata sample head(metadata) # Save results to RDS file saveRDS(result, \"synthesize_results.rds\")  # Load previously saved results result <- readRDS(\"synthesize_results.rds\")  # Export as CSV write.csv(result$expression, \"expression_matrix.csv\") write.csv(result$metadata, \"sample_metadata.csv\")"},{"path":"https://synthesizebio.github.io/rsynthbio/articles/getting-started.html","id":"custom-validation","dir":"Articles","previous_headings":"Basic Usage","what":"Custom Validation","title":"Getting Started","text":"can validate queries sending API:","code":"# Validate structure validate_query(query)  # Validate modality validate_modality(query)"},{"path":"https://synthesizebio.github.io/rsynthbio/articles/getting-started.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Getting Started","text":"","code":"sessionInfo()"},{"path":"https://synthesizebio.github.io/rsynthbio/articles/getting-started.html","id":"additional-resources","dir":"Articles","previous_headings":"","what":"Additional Resources","title":"Getting Started","text":"Package Source Code File Bug Reports","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Candace Savonen. Author, maintainer.","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Savonen C (2025). rsynthbio: Synthesize Bio API Wrapper. R package version 3.0.0, https://github.com/synthesizebio/rsynthbio.","code":"@Manual{,   title = {rsynthbio: Synthesize Bio API Wrapper},   author = {Candace Savonen},   year = {2025},   note = {R package version 3.0.0},   url = {https://github.com/synthesizebio/rsynthbio}, }"},{"path":"https://synthesizebio.github.io/rsynthbio/index.html","id":"rsynthbio-","dir":"","previous_headings":"","what":"Synthesize Bio API Wrapper","title":"Synthesize Bio API Wrapper","text":"rsynthbio R package provides convenient interface Synthesize Bio API, allowing users generate realistic gene expression data based specified biological conditions. package enables researchers easily access AI-generated transcriptomic data various modalities, including bulk RNA-seq single-cell RNA-seq. generate datasets without code, use web platform. See full documentation . questions, suggestions, support, email us support@synthesize.bio.","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/index.html","id":"how-to-install","dir":"","previous_headings":"","what":"How to Install","title":"Synthesize Bio API Wrapper","text":"can install rsynthbio CRAN: install development version GitHub, use remotes package: installed, load package:","code":"install.packages(\"rsynthbio\") if (!(\"remotes\" %in% installed.packages())) {   install.packages(\"remotes\") } remotes::install_github(\"synthesizebio/rsynthbio\") library(rsynthbio)"},{"path":"https://synthesizebio.github.io/rsynthbio/index.html","id":"authentication","dir":"","previous_headings":"","what":"Authentication","title":"Synthesize Bio API Wrapper","text":"using Synthesize Bio API, need set API token. package provides secure way handle authentication: Load API token session: can obtain API token registering Synthesize Bio.","code":"# Securely prompt for and store your API token # The token will not be visible in the console set_synthesize_token()  # You can also store the token in your system keyring for persistence # across R sessions (requires the 'keyring' package) set_synthesize_token(use_keyring = TRUE) # In future sessions, load the stored token load_synthesize_token_from_keyring()  # Check if a token is already set has_synthesize_token()"},{"path":"https://synthesizebio.github.io/rsynthbio/index.html","id":"security-best-practices","dir":"","previous_headings":"Authentication","what":"Security Best Practices","title":"Synthesize Bio API Wrapper","text":"security reasons, remember clear token ’re done: Never hard-code token scripts shared committed version control.","code":"# Clear token from current session clear_synthesize_token()  # Clear token from both session and keyring clear_synthesize_token(remove_from_keyring = TRUE)"},{"path":"https://synthesizebio.github.io/rsynthbio/index.html","id":"basic-usage","dir":"","previous_headings":"","what":"Basic Usage","title":"Synthesize Bio API Wrapper","text":"Please see Getting Started guide details.","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/index.html","id":"available-modalities","dir":"","previous_headings":"Basic Usage","what":"Available Modalities","title":"Synthesize Bio API Wrapper","text":"package supports multiple data modalities. can view available modalities : Currently supported modalities: bulk: Bulk RNA-seq data single-cell: Single-cell RNA-seq data","code":"# Check available modalities get_valid_modalities() # Returns: \"bulk\" \"single-cell\""},{"path":"https://synthesizebio.github.io/rsynthbio/index.html","id":"creating-a-query","dir":"","previous_headings":"Basic Usage","what":"Creating a Query","title":"Synthesize Bio API Wrapper","text":"first step obtaining AI-generated gene expression data create query. package provides sample queries modality: query consists : modality: type gene expression data generate (“bulk” “single-cell”) mode: prediction mode (e.g., “sample generation”, “mean estimation”) inputs: list biological conditions generate data ","code":"# Get a sample query for bulk RNA-seq query <- get_valid_query(modality = \"bulk\")  # Get a sample query for single-cell RNA-seq query_sc <- get_valid_query(modality = \"single-cell\")  # Inspect the query structure str(query)"},{"path":"https://synthesizebio.github.io/rsynthbio/index.html","id":"making-predictions","dir":"","previous_headings":"Basic Usage","what":"Making Predictions","title":"Synthesize Bio API Wrapper","text":"API uses asynchronous model: query submitted, system polls completion, results downloaded ready. happens automatically:","code":"# Request raw counts data result <- predict_query(query, as_counts = TRUE)  # The function will automatically: # 1. Submit your query to the API # 2. Poll for completion (default: checks every 2 seconds) # 3. Download and parse results when ready # 4. Return formatted data frames  # Access the results metadata <- result$metadata expression <- result$expression"},{"path":"https://synthesizebio.github.io/rsynthbio/index.html","id":"advanced-options","dir":"","previous_headings":"Basic Usage","what":"Advanced Options","title":"Synthesize Bio API Wrapper","text":"can customize polling behavior:","code":"# Adjust polling timeout (default: 15 minutes) result <- predict_query(   query,   poll_timeout_seconds = 1800,  # 30 minutes   poll_interval_seconds = 5      # Check every 5 seconds )  # Get log-transformed CPM instead of raw counts result_log <- predict_query(query, as_counts = FALSE)"},{"path":"https://synthesizebio.github.io/rsynthbio/index.html","id":"rate-limits","dir":"","previous_headings":"","what":"Rate Limits","title":"Synthesize Bio API Wrapper","text":"Free usage Synthesize Bio limited. exceed limit, receive error message stating ’ve exceeded limit. generate samples, please contact us support@synthesize.bio.","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/API_BASE_URL.html","id":null,"dir":"Reference","previous_headings":"","what":"API Base URL — API_BASE_URL","title":"API Base URL — API_BASE_URL","text":"Base URL Synthesize Bio API","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/API_BASE_URL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"API Base URL — API_BASE_URL","text":"","code":"API_BASE_URL"},{"path":"https://synthesizebio.github.io/rsynthbio/reference/API_BASE_URL.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"API Base URL — API_BASE_URL","text":"object class character length 1.","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/DEFAULT_POLL_INTERVAL_SECONDS.html","id":null,"dir":"Reference","previous_headings":"","what":"Default Poll Interval — DEFAULT_POLL_INTERVAL_SECONDS","title":"Default Poll Interval — DEFAULT_POLL_INTERVAL_SECONDS","text":"Default polling interval (seconds) async model queries","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/DEFAULT_POLL_INTERVAL_SECONDS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default Poll Interval — DEFAULT_POLL_INTERVAL_SECONDS","text":"","code":"DEFAULT_POLL_INTERVAL_SECONDS"},{"path":"https://synthesizebio.github.io/rsynthbio/reference/DEFAULT_POLL_INTERVAL_SECONDS.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Default Poll Interval — DEFAULT_POLL_INTERVAL_SECONDS","text":"object class numeric length 1.","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/DEFAULT_POLL_TIMEOUT_SECONDS.html","id":null,"dir":"Reference","previous_headings":"","what":"Default Poll Timeout — DEFAULT_POLL_TIMEOUT_SECONDS","title":"Default Poll Timeout — DEFAULT_POLL_TIMEOUT_SECONDS","text":"Default maximum timeout (seconds) async model queries","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/DEFAULT_POLL_TIMEOUT_SECONDS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default Poll Timeout — DEFAULT_POLL_TIMEOUT_SECONDS","text":"","code":"DEFAULT_POLL_TIMEOUT_SECONDS"},{"path":"https://synthesizebio.github.io/rsynthbio/reference/DEFAULT_POLL_TIMEOUT_SECONDS.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Default Poll Timeout — DEFAULT_POLL_TIMEOUT_SECONDS","text":"object class numeric length 1.","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/DEFAULT_TIMEOUT.html","id":null,"dir":"Reference","previous_headings":"","what":"Default Timeout — DEFAULT_TIMEOUT","title":"Default Timeout — DEFAULT_TIMEOUT","text":"Default timeout (seconds) outbound HTTP requests","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/DEFAULT_TIMEOUT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default Timeout — DEFAULT_TIMEOUT","text":"","code":"DEFAULT_TIMEOUT"},{"path":"https://synthesizebio.github.io/rsynthbio/reference/DEFAULT_TIMEOUT.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Default Timeout — DEFAULT_TIMEOUT","text":"object class numeric length 1.","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/MODEL_MODALITIES.html","id":null,"dir":"Reference","previous_headings":"","what":"Model Modalities — MODEL_MODALITIES","title":"Model Modalities — MODEL_MODALITIES","text":"nested list containing supported modalities different model versions + bulk = bulk RNA-seq + single-cell = single-cell RNA-seq","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/MODEL_MODALITIES.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model Modalities — MODEL_MODALITIES","text":"","code":"MODEL_MODALITIES"},{"path":"https://synthesizebio.github.io/rsynthbio/reference/MODEL_MODALITIES.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Model Modalities — MODEL_MODALITIES","text":"nested list structure: model type > version > modalities","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/clear_synthesize_token.html","id":null,"dir":"Reference","previous_headings":"","what":"Clear Synthesize Bio API Token — clear_synthesize_token","title":"Clear Synthesize Bio API Token — clear_synthesize_token","text":"Clears Synthesize Bio API token environment current R session. useful security purposes finished working API switching different accounts.","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/clear_synthesize_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clear Synthesize Bio API Token — clear_synthesize_token","text":"","code":"clear_synthesize_token(remove_from_keyring = FALSE)"},{"path":"https://synthesizebio.github.io/rsynthbio/reference/clear_synthesize_token.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clear Synthesize Bio API Token — clear_synthesize_token","text":"remove_from_keyring Logical, whether also remove token system keyring stored . Defaults FALSE.","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/clear_synthesize_token.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clear Synthesize Bio API Token — clear_synthesize_token","text":"Invisibly returns TRUE.","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/clear_synthesize_token.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clear Synthesize Bio API Token — clear_synthesize_token","text":"","code":"if (FALSE) { # \\dontrun{ # Clear token from current session only clear_synthesize_token()  # Clear token from both session and keyring clear_synthesize_token(remove_from_keyring = TRUE) } # }"},{"path":"https://synthesizebio.github.io/rsynthbio/reference/extract_expression_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Gene Expression Data from API Response — extract_expression_data","title":"Extract Gene Expression Data from API Response — extract_expression_data","text":"Extracts combines gene expression data complex API response, proper formatting metadata association.","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/extract_expression_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Gene Expression Data from API Response — extract_expression_data","text":"","code":"extract_expression_data(parsed_content, as_counts = TRUE)"},{"path":"https://synthesizebio.github.io/rsynthbio/reference/extract_expression_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Gene Expression Data from API Response — extract_expression_data","text":"parsed_content parsed API response list as_counts Logical, FALSE, transforms predicted expression counts logCPM (default TRUE, returning raw counts).","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/extract_expression_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Gene Expression Data from API Response — extract_expression_data","text":"list two components:         - metadata: tibble containing sample metadata         - expression: tibble containing combined gene expression data","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/get_json.html","id":null,"dir":"Reference","previous_headings":"","what":"Get JSON from URL — get_json","title":"Get JSON from URL — get_json","text":"Internal function fetch JSON URL","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/get_json.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get JSON from URL — get_json","text":"","code":"get_json(url)"},{"path":"https://synthesizebio.github.io/rsynthbio/reference/get_json.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get JSON from URL — get_json","text":"url URL fetch ","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/get_json.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get JSON from URL — get_json","text":"parsed JSON content","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/get_valid_modalities.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Valid Modalities — get_valid_modalities","title":"Get Valid Modalities — get_valid_modalities","text":"Returns vector possible output modalities supported model. modalities represent different types gene expression data can generated Synthesize Bio API.","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/get_valid_modalities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Valid Modalities — get_valid_modalities","text":"","code":"get_valid_modalities()"},{"path":"https://synthesizebio.github.io/rsynthbio/reference/get_valid_modalities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Valid Modalities — get_valid_modalities","text":"character vector containing valid modality strings.","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/get_valid_modalities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Valid Modalities — get_valid_modalities","text":"","code":"# Get all supported modalities modalities <- get_valid_modalities() print(modalities) #> [1] \"bulk\"        \"single-cell\"  # Check if a specific modality is supported \"bulk\" %in% get_valid_modalities() #> [1] TRUE"},{"path":"https://synthesizebio.github.io/rsynthbio/reference/get_valid_modes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Valid Modes — get_valid_modes","title":"Get Valid Modes — get_valid_modes","text":"Returns vector possible modes supported model. modes represent different types gene expression data can generated Synthesize Bio API.","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/get_valid_modes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Valid Modes — get_valid_modes","text":"","code":"get_valid_modes()"},{"path":"https://synthesizebio.github.io/rsynthbio/reference/get_valid_modes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Valid Modes — get_valid_modes","text":"character vector containing valid mode strings.","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/get_valid_modes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Valid Modes — get_valid_modes","text":"","code":"# Get all supported modes modes <- get_valid_modes() print(modes) #> [1] \"sample generation\"   \"mean estimation\"     \"metadata prediction\"  # Check if a specific mode is supported \"sample generation\" %in% get_valid_modes() #> [1] TRUE"},{"path":"https://synthesizebio.github.io/rsynthbio/reference/get_valid_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Valid Query Example — get_valid_query","title":"Get Valid Query Example — get_valid_query","text":"Generates sample query prediction validation model. function provides example query structure can modified specific needs. sample query contains two example inputs: one cell line CRISPR perturbation another primary tissue sample disease information.","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/get_valid_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Valid Query Example — get_valid_query","text":"","code":"get_valid_query(modality = \"bulk\")"},{"path":"https://synthesizebio.github.io/rsynthbio/reference/get_valid_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Valid Query Example — get_valid_query","text":"modality Character string specifying modality. Either \"bulk\" \"single-cell\". Default \"bulk\".","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/get_valid_query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Valid Query Example — get_valid_query","text":"list representing valid query structure.","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/get_valid_query.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Valid Query Example — get_valid_query","text":"","code":"# Get a sample query for bulk RNA-seq query <- get_valid_query()  # Get a sample query for single-cell RNA-seq query_sc <- get_valid_query(modality = \"single-cell\")  # Modify the query query$inputs[[1]]$num_samples <- 10"},{"path":"https://synthesizebio.github.io/rsynthbio/reference/has_synthesize_token.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if Synthesize Bio API Token is Set — has_synthesize_token","title":"Check if Synthesize Bio API Token is Set — has_synthesize_token","text":"Checks whether Synthesize Bio API token currently set environment. Useful conditional code requires API token.","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/has_synthesize_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if Synthesize Bio API Token is Set — has_synthesize_token","text":"","code":"has_synthesize_token()"},{"path":"https://synthesizebio.github.io/rsynthbio/reference/has_synthesize_token.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if Synthesize Bio API Token is Set — has_synthesize_token","text":"Logical, TRUE token set, FALSE otherwise.","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/has_synthesize_token.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if Synthesize Bio API Token is Set — has_synthesize_token","text":"","code":"if (FALSE) { # \\dontrun{ # Check if token is set if (!has_synthesize_token()) {   # Prompt for token if not set   set_synthesize_token() } } # }"},{"path":"https://synthesizebio.github.io/rsynthbio/reference/load_synthesize_token_from_keyring.html","id":null,"dir":"Reference","previous_headings":"","what":"Load Synthesize Bio API Token from Keyring — load_synthesize_token_from_keyring","title":"Load Synthesize Bio API Token from Keyring — load_synthesize_token_from_keyring","text":"Loads previously stored Synthesize Bio API token system keyring sets environment current session.","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/load_synthesize_token_from_keyring.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load Synthesize Bio API Token from Keyring — load_synthesize_token_from_keyring","text":"","code":"load_synthesize_token_from_keyring()"},{"path":"https://synthesizebio.github.io/rsynthbio/reference/load_synthesize_token_from_keyring.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load Synthesize Bio API Token from Keyring — load_synthesize_token_from_keyring","text":"Invisibly returns TRUE successful, FALSE token found keyring.","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/load_synthesize_token_from_keyring.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load Synthesize Bio API Token from Keyring — load_synthesize_token_from_keyring","text":"","code":"if (FALSE) { # \\dontrun{ # Load token from keyring load_synthesize_token_from_keyring() } # }"},{"path":"https://synthesizebio.github.io/rsynthbio/reference/log_cpm.html","id":null,"dir":"Reference","previous_headings":"","what":"Log CPM Transformation — log_cpm","title":"Log CPM Transformation — log_cpm","text":"Transforms raw counts expression data log1p(CPM) (Counts Per Million). common normalization method gene expression data accounts library size differences applies log transformation reduce effect outliers.","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/log_cpm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log CPM Transformation — log_cpm","text":"","code":"log_cpm(expression)"},{"path":"https://synthesizebio.github.io/rsynthbio/reference/log_cpm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log CPM Transformation — log_cpm","text":"expression data.frame containing raw counts expression data.","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/log_cpm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log CPM Transformation — log_cpm","text":"data.frame containing log1p(CPM) transformed data.","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/log_cpm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Log CPM Transformation — log_cpm","text":"","code":"# Create a sample expression matrix with raw counts raw_counts <- data.frame(   gene1 = c(100, 200, 300),   gene2 = c(50, 100, 150),   gene3 = c(10, 20, 30) )  # Transform to log CPM log_cpm_data <- log_cpm(raw_counts) print(log_cpm_data) #>      gene1    gene2     gene3 #> 1 13.34551 11.95922  9.944358 #> 2 14.03865 12.65236 10.637481 #> 3 14.44412 13.05783 11.042938"},{"path":"https://synthesizebio.github.io/rsynthbio/reference/poll_model_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Poll Model Query — poll_model_query","title":"Poll Model Query — poll_model_query","text":"Internal function poll status endpoint ready/failed timeout","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/poll_model_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Poll Model Query — poll_model_query","text":"","code":"poll_model_query(api_base_url, model_query_id, poll_interval, timeout_seconds)"},{"path":"https://synthesizebio.github.io/rsynthbio/reference/poll_model_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Poll Model Query — poll_model_query","text":"api_base_url base URL API model_query_id model query ID poll poll_interval Seconds polling attempts timeout_seconds Maximum total seconds wait","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/poll_model_query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Poll Model Query — poll_model_query","text":"list status payload","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/predict_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict Gene Expression — predict_query","title":"Predict Gene Expression — predict_query","text":"Sends query Synthesize Bio API prediction retrieves gene expression samples. function validates query, sends API, processes response usable data frames.","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/predict_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict Gene Expression — predict_query","text":"","code":"predict_query(   query,   as_counts = TRUE,   api_base_url = API_BASE_URL,   poll_interval_seconds = DEFAULT_POLL_INTERVAL_SECONDS,   poll_timeout_seconds = DEFAULT_POLL_TIMEOUT_SECONDS,   return_download_url = FALSE )"},{"path":"https://synthesizebio.github.io/rsynthbio/reference/predict_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict Gene Expression — predict_query","text":"query list representing query data send API. Use `get_valid_query()` generate example. as_counts Logical, FALSE, transforms predicted expression counts logCPM (default TRUE, returning raw counts). api_base_url base URL API server. Default API_BASE_URL. poll_interval_seconds Seconds polling attempts status endpoint. Default DEFAULT_POLL_INTERVAL_SECONDS (2). poll_timeout_seconds Maximum total seconds wait timing . Default DEFAULT_POLL_TIMEOUT_SECONDS (900 = 15 minutes). return_download_url Logical, TRUE, returns list containing signed download URL instead parsing data frames. Default FALSE.","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/predict_query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict Gene Expression — predict_query","text":"list two data frames:         - 'metadata': contains metadata sample         - 'expression': contains expression data sample","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/predict_query.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict Gene Expression — predict_query","text":"","code":"# Set your API key (in practice, use a more secure method) if (FALSE) { # \\dontrun{  # To start using rsynthbio, first you need to have an account with synthesize.bio. # Go here to create one: https://app.synthesize.bio/  set_synthesize_token()  # Create a query query <- get_valid_query()  # Request raw counts result <- predict_query(query, as_counts = TRUE)  # Access the results metadata <- result$metadata expression <- result$expression  # Request log CPM transformed data log_result <- predict_query(query, as_counts = FALSE) log_expression <- log_result$expression  # Explore the top expressed genes in the first sample head(sort(expression[1, ], decreasing = TRUE)) } # }"},{"path":"https://synthesizebio.github.io/rsynthbio/reference/resolve_api_slug.html","id":null,"dir":"Reference","previous_headings":"","what":"Resolve API Slug — resolve_api_slug","title":"Resolve API Slug — resolve_api_slug","text":"Internal function resolve API slug based modality","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/resolve_api_slug.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resolve API Slug — resolve_api_slug","text":"","code":"resolve_api_slug(modality)"},{"path":"https://synthesizebio.github.io/rsynthbio/reference/resolve_api_slug.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resolve API Slug — resolve_api_slug","text":"modality modality string (\"bulk\" \"single-cell\")","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/resolve_api_slug.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resolve API Slug — resolve_api_slug","text":"API slug string","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/set_synthesize_token.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Synthesize Bio API Token — set_synthesize_token","title":"Set Synthesize Bio API Token — set_synthesize_token","text":"Securely prompts stores Synthesize Bio API token environment. function uses getPass securely handle token input without displaying console. token stored SYNTHESIZE_API_KEY environment variable current R session.","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/set_synthesize_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Synthesize Bio API Token — set_synthesize_token","text":"","code":"set_synthesize_token(use_keyring = FALSE, token = NULL)"},{"path":"https://synthesizebio.github.io/rsynthbio/reference/set_synthesize_token.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Synthesize Bio API Token — set_synthesize_token","text":"use_keyring Logical, whether also store token securely system keyring future sessions. Defaults FALSE. token Character, optional. provided, uses token instead prompting. parameter used non-interactive scripts.","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/set_synthesize_token.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set Synthesize Bio API Token — set_synthesize_token","text":"Invisibly returns TRUE successful.","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/set_synthesize_token.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set Synthesize Bio API Token — set_synthesize_token","text":"","code":"# Interactive prompt for token if (FALSE) { # \\dontrun{ set_synthesize_token()  # Provide token directly (less secure, not recommended for interactive use) set_synthesize_token(token = \"your-token-here\")  # Store in system keyring for future sessions set_synthesize_token(use_keyring = TRUE) } # }"},{"path":"https://synthesizebio.github.io/rsynthbio/reference/start_model_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Start Model Query — start_model_query","title":"Start Model Query — start_model_query","text":"Internal function start async model query","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/start_model_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Start Model Query — start_model_query","text":"","code":"start_model_query(api_base_url, api_slug, query)"},{"path":"https://synthesizebio.github.io/rsynthbio/reference/start_model_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Start Model Query — start_model_query","text":"api_base_url base URL API api_slug API slug specific model query query list","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/start_model_query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Start Model Query — start_model_query","text":"model query ID","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/transform_result_to_frames.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform Result to Frames — transform_result_to_frames","title":"Transform Result to Frames — transform_result_to_frames","text":"Internal function transform final JSON result data frames","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/transform_result_to_frames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform Result to Frames — transform_result_to_frames","text":"","code":"transform_result_to_frames(content)"},{"path":"https://synthesizebio.github.io/rsynthbio/reference/transform_result_to_frames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform Result to Frames — transform_result_to_frames","text":"content parsed JSON content","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/transform_result_to_frames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform Result to Frames — transform_result_to_frames","text":"list expression metadata data frames","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/validate_modality.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Query Modality — validate_modality","title":"Validate Query Modality — validate_modality","text":"Validates modality specified query allowed model. function checks `modality` value one supported modalities.","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/validate_modality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Query Modality — validate_modality","text":"","code":"validate_modality(query)"},{"path":"https://synthesizebio.github.io/rsynthbio/reference/validate_modality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Query Modality — validate_modality","text":"query list containing query data.","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/validate_modality.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Query Modality — validate_modality","text":"Invisibly returns TRUE validation passes. Throws error modality key missing selected modality allowed.","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/validate_modality.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate Query Modality — validate_modality","text":"","code":"# Create a valid query query <- get_valid_query() validate_modality(query) # Passes validation  # Example with invalid modality if (FALSE) { # \\dontrun{ invalid_query <- get_valid_query() invalid_query$modality <- \"unsupported_modality\" validate_modality(invalid_query) # Throws error for invalid modality } # }"},{"path":"https://synthesizebio.github.io/rsynthbio/reference/validate_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Query Structure — validate_query","title":"Validate Query Structure — validate_query","text":"Validates structure contents query based model. function checks query list contains required keys.","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/validate_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Query Structure — validate_query","text":"","code":"validate_query(query)"},{"path":"https://synthesizebio.github.io/rsynthbio/reference/validate_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Query Structure — validate_query","text":"query list containing query data.","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/validate_query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Query Structure — validate_query","text":"Invisibly returns TRUE validation passes. Throws error query structure invalid missing required keys.","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/reference/validate_query.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate Query Structure — validate_query","text":"","code":"# Create a valid query query <- get_valid_query() validate_query(query) # Passes validation  # Example with invalid query (missing required key) if (FALSE) { # \\dontrun{ invalid_query <- list(inputs = list(), mode = \"mean estimation\") validate_query(invalid_query) # Throws error for missing modality } # }"},{"path":[]},{"path":"https://synthesizebio.github.io/rsynthbio/news/index.html","id":"major-changes-3-0-0","dir":"Changelog","previous_headings":"","what":"Major Changes","title":"rsynthbio 3.0.0 (Development)","text":"predict_query() now uses asynchronous workflow: submit → poll → download Added automatic status polling configurable intervals timeouts New parameters: poll_interval_seconds (default: 2), poll_timeout_seconds (default: 900) get_valid_query() now accepts modality parameter (“bulk” “single-cell”) get_valid_modalities() now returns “bulk” “single-cell” Updated MODEL_MODALITIES include modalities","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/news/index.html","id":"breaking-changes-3-0-0","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"rsynthbio 3.0.0 (Development)","text":"API Base URL Changed: API_BASE_URL now https://app.synthesize.bio (base URL , versioned endpoint) Removed raw_response parameter Removed url parameter (replaced api_base_url) Added poll_interval_seconds parameter Added poll_timeout_seconds parameter Added return_download_url parameter","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/news/index.html","id":"new-functions-3-0-0","dir":"Changelog","previous_headings":"","what":"New Functions","title":"rsynthbio 3.0.0 (Development)","text":"resolve_api_slug(): Maps modality API endpoint slug (internal) start_model_query(): Initiates async model query (internal) poll_model_query(): Polls status endpoint completion (internal) get_json(): Fetches results signed download URL (internal) transform_result_to_frames(): Converts JSON data frames (internal)","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/news/index.html","id":"bug-fixes-3-0-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"rsynthbio 3.0.0 (Development)","text":"Fixed metadata handling queries empty metadata fields Improved error messages failed queries (now shows error message instead error URL) Better handling single-cell count data format (dict vs list)","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/news/index.html","id":"documentation-3-0-0","dir":"Changelog","previous_headings":"","what":"Documentation","title":"rsynthbio 3.0.0 (Development)","text":"Updated README.md explain async API behavior Updated vignettes async workflow examples Added examples bulk single-cell modalities Clarified polling timeout interval configuration","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/news/index.html","id":"tests-3-0-0","dir":"Changelog","previous_headings":"","what":"Tests","title":"rsynthbio 3.0.0 (Development)","text":"Added comprehensive test suite mirroring Python implementation Added live API tests bulk single-cell modalities Added tests invalid metadata validation Added mocked async workflow tests (success, failure, timeout scenarios)","code":""},{"path":"https://synthesizebio.github.io/rsynthbio/news/index.html","id":"rsynthbio-300","dir":"Changelog","previous_headings":"","what":"rsynthbio 3.0.0","title":"rsynthbio 3.0.0","text":"rsynthbio now works GEM-1 model Synthesize Bio. older versions Synthesize Bio models longer supported. updated documentation reflect new model. flexibility specifying url Synthesize Bio API.","code":""}]
