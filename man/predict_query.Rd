% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/call_model_api.R
\name{predict_query}
\alias{predict_query}
\title{Predict Gene Expression}
\usage{
predict_query(
  query,
  as_counts = TRUE,
  total_count = NULL,
  deterministic_latents = NULL,
  fixed_total_count = NULL,
  api_base_url = API_BASE_URL,
  poll_interval_seconds = DEFAULT_POLL_INTERVAL_SECONDS,
  poll_timeout_seconds = DEFAULT_POLL_TIMEOUT_SECONDS,
  return_download_url = FALSE
)
}
\arguments{
\item{query}{A list representing the query data to send to the API.
Use `get_valid_query()` to generate an example.}

\item{as_counts}{Logical, if FALSE, transforms the predicted expression counts
into logCPM (default is TRUE, returning raw counts).}

\item{total_count}{Integer, library size used when converting predicted log CPM back to
raw counts. Higher values scale counts up proportionally. If a reference expression
is supplied (reference-conditioned endpoint) and `fixed_total_count` is FALSE,
the model will ignore this value and use the reference's observed total counts instead.
Default: 10,000,000 for bulk; 10,000 for single-cell (when not specified).}

\item{deterministic_latents}{Logical, if TRUE, the model uses the mean of each latent
distribution (p(z|metadata) or q(z|x)) instead of sampling. This removes randomness
from latent sampling and produces deterministic outputs for the same inputs.
Default is NULL (uses API default behavior).}

\item{fixed_total_count}{Logical, controls whether to preserve the reference's library size
(reference-conditioned only). If FALSE, `total_count` is taken from the reference
sample(s). If TRUE, `total_count` is taken from the request (or default), even when
a reference is provided. Default is NULL (uses API default behavior).}

\item{api_base_url}{The base URL for the API server. Default is API_BASE_URL.}

\item{poll_interval_seconds}{Seconds between polling attempts of the status endpoint.
Default is DEFAULT_POLL_INTERVAL_SECONDS (2).}

\item{poll_timeout_seconds}{Maximum total seconds to wait before timing out.
Default is DEFAULT_POLL_TIMEOUT_SECONDS (900 = 15 minutes).}

\item{return_download_url}{Logical, if TRUE, returns a list containing the signed
download URL instead of parsing into data frames. Default is FALSE.}
}
\value{
A list. If `return_download_url` is `FALSE` (default), the list contains
        two data frames: `metadata` and `expression`. If `TRUE`, the list
        contains `download_url` and empty `metadata` and `expression` data frames.
}
\description{
Sends a query to the Synthesize Bio API for prediction
and retrieves gene expression samples. This function validates the query, sends it
to the API, and processes the response into usable data frames.
}
\examples{
# Set your API key (in practice, use a more secure method)
\dontrun{

# To start using rsynthbio, first you need to have an account with synthesize.bio.
# Go here to create one: https://app.synthesize.bio/

set_synthesize_token()

# Create a query
query <- get_valid_query()

# Request raw counts
result <- predict_query(query, as_counts = TRUE)

# Access the results
metadata <- result$metadata
expression <- result$expression

# Request log CPM transformed data
log_result <- predict_query(query, as_counts = FALSE)
log_expression <- log_result$expression

# Explore the top expressed genes in the first sample
head(sort(expression[1, ], decreasing = TRUE))

# Use deterministic latents for reproducible results
result_det <- predict_query(query, deterministic_latents = TRUE)

# Specify a custom total count (library size)
result_custom <- predict_query(query, total_count = 5000000)
}
}
